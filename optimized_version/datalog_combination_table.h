/******************************************************************************
 *                    C A E S A R _ D A T A L O G _ 1               
 *-----------------------------------------------------------------------------
 *   Technical University of Valencia
 *   DSIC / ELP
 *   Camino de Vera s/n
 *   46022 Valencia
 *   SPAIN
 *-----------------------------------------------------------------------------
 *   Module             :       %M%
 *   Authors            :       Maria ALPUENTE, Marco FELIU, Christophe JOUBERT
 *                              and Alicia VILLANUEVA
 *   Version            :       %R%.%L%
 *   Date               :       %E% %U%
 *****************************************************************************/

#ifndef DATALOG_COMBINATION_TABLE_H_
#define DATALOG_COMBINATION_TABLE_H_

#include "datalog_common.h"

/*============================================================================*/
/* Types */

typedef struct CAESAR_STRUCT_COMBINATION_TABLE_ENTRY
{
	/* cpredicate index */
	CAESAR_TYPE_INDEX_TABLE_1 *ARGUMENTS;

	/* Relation index */
	CAESAR_TYPE_BOOLEAN *ARGUMENT_IS_VARIABLE;

	/* Query length */
	CAESAR_TYPE_NATURAL LENGTH;
} CAESAR_BODY_COMBINATION_TABLE_ENTRY, *CAESAR_TYPE_COMBINATION_TABLE_ENTRY;

/*============================================================================*/
/* Exported functions */

void COMBINATION_TABLE_ADD_NONPACKED_ENTRY(
		CAESAR_TYPE_TABLE_1 COMBINATION_TABLE,
		CAESAR_TYPE_COMBINATION_TABLE_ENTRY NONPACKED_COMBINATION,
		CAESAR_TYPE_INDEX_TABLE_1 *INDEX);

CAESAR_TYPE_NATURAL COMBINATION_SIZE(CAESAR_TYPE_NATURAL ARITY);
void COMBINATION_TABLE_BUILD(CAESAR_TYPE_TABLE_1 *COMBINATION_TABLE_POINTER,
		CAESAR_TYPE_NATURAL ARITY);
void COMBINATION_SET_VALUE_AT(CAESAR_TYPE_POINTER COMBINATION,
		CAESAR_TYPE_NATURAL INDEX, CAESAR_TYPE_NATURAL ARITY,
		CAESAR_TYPE_INDEX_TABLE_1 TABLE_INDEX, CAESAR_TYPE_BOOLEAN IS_VARIABLE);
void COMBINATION_GET_VALUE_AT(CAESAR_TYPE_POINTER COMBINATION_TABLE_ENTRY,
		CAESAR_TYPE_NATURAL INDEX, CAESAR_TYPE_NATURAL ARITY,
		CAESAR_TYPE_INDEX_TABLE_1 *TABLE_INDEX,
		CAESAR_TYPE_BOOLEAN *IS_VARIABLE);

CAESAR_TYPE_BOOLEAN COMBINATION_IS_CONCRETIZATION_OF(
		CAESAR_TYPE_POINTER concrete_combination, CAESAR_TYPE_NATURAL arity,
		CAESAR_TYPE_POINTER general_combination);
CAESAR_TYPE_BOOLEAN FACT_IS_CONCRETIZATION_OF(
		CAESAR_TYPE_POINTER concrete_combination, CAESAR_TYPE_NATURAL arity,
		CAESAR_TYPE_POINTER general_combination);
void COMBINATION_PRINT(CAESAR_TYPE_INDEX_TABLE_1 RELATION_INDEX,
		CAESAR_TYPE_INDEX_TABLE_1 COMBINATION_INDEX);
void COMBINATION_TABLE_GET_ENTRY_BY_INDEX(
		CAESAR_TYPE_TABLE_1 COMBINATION_TABLE, CAESAR_TYPE_INDEX_TABLE_1 INDEX,
		CAESAR_TYPE_NATURAL ARITY,
		CAESAR_TYPE_COMBINATION_TABLE_ENTRY COMBINATION);
void COMBINATION_TABLE_GET_BINARY_ENTRY_BY_INDEX(
		CAESAR_TYPE_TABLE_1 COMBINATION_TABLE, CAESAR_TYPE_INDEX_TABLE_1 INDEX,
		CAESAR_TYPE_POINTER *COMBINATION);
void COMBINATION_TABLE_PRINT(CAESAR_TYPE_FILE FILE, CAESAR_TYPE_TABLE_1 TABLE,
		CAESAR_TYPE_NATURAL ARITY);
CAESAR_TYPE_BOOLEAN
		COMBINATION_TABLE_ADD_ENTRY(CAESAR_TYPE_TABLE_1 COMBINATION_TABLE,
				CAESAR_TYPE_INDEX_TABLE_1 *INDEX);
void COMBINATION_TABLE_NEW_ENTRY(CAESAR_TYPE_TABLE_1 COMBINATION_TABLE,
		CAESAR_TYPE_POINTER *COMBINATION_TABLE_ENTRY);
CAESAR_TYPE_BOOLEAN COMBINATION_TABLE_ADD_ENTRY_COPY(
		CAESAR_TYPE_TABLE_1 COMBINATION_TABLE,
		CAESAR_TYPE_POINTER OUTTER_ENTRY, CAESAR_TYPE_NATURAL ARITY,
		CAESAR_TYPE_INDEX_TABLE_1 *INDEX);

#endif /*DATALOG_COMBINATION_TABLE_H_*/
